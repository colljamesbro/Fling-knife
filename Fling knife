local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Variables
local ultraInstinctActive = false

-- Create UI
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game:GetService("CoreGui")  -- Attach to CoreGui for local use
screenGui.Name = "UltraInstinctGui"

-- Main Button to open/close Ultra Instincts tab
local mainButton = Instance.new("TextButton")
mainButton.Parent = screenGui
mainButton.Size = UDim2.new(0, 200, 0, 50)
mainButton.Position = UDim2.new(0.5, -100, 0, 20)
mainButton.BackgroundColor3 = Color3.new(1, 1, 1)
mainButton.Text = "Open Ultra Instincts"
mainButton.Font = Enum.Font.SourceSans
mainButton.TextSize = 20
mainButton.TextColor3 = Color3.new(0, 0, 0)

-- Side Tab
local sideTab = Instance.new("Frame")
sideTab.Parent = screenGui
sideTab.Size = UDim2.new(0, 200, 0, 100)
sideTab.Position = UDim2.new(1, -220, 0.5, -50)
sideTab.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
sideTab.Visible = false

-- Toggle Switch Background (for Ultra Instincts)
local toggleBackground = Instance.new("Frame")
toggleBackground.Parent = sideTab
toggleBackground.Size = UDim2.new(0, 50, 0, 25)
toggleBackground.Position = UDim2.new(0.5, -25, 0.5, -12.5)
toggleBackground.BackgroundColor3 = Color3.fromRGB(128, 80, 128)
toggleBackground.BorderSizePixel = 0
toggleBackground.Name = "ToggleBackground"

-- Toggle Switch Circle
local toggleCircle = Instance.new("Frame")
toggleCircle.Parent = toggleBackground
toggleCircle.Size = UDim2.new(0, 20, 0, 20)
toggleCircle.Position = UDim2.new(0, 2.5, 0.5, -10)
toggleCircle.BackgroundColor3 = Color3.new(1, 1, 1)
toggleCircle.BorderSizePixel = 0
toggleCircle.Name = "ToggleCircle"

-- Function to update toggle switch position and color
local function updateToggleSwitch()
    if ultraInstinctActive then
        toggleCircle.Position = UDim2.new(1, -22.5, 0.5, -10)
        toggleBackground.BackgroundColor3 = Color3.fromRGB(60, 130, 60) -- Green for "On"
    else
        toggleCircle.Position = UDim2.new(0, 2.5, 0.5, -10)
        toggleBackground.BackgroundColor3 = Color3.fromRGB(128, 80, 128) -- Purple for "Off"
    end
end

-- Open/Close Side Tab
mainButton.MouseButton1Click:Connect(function()
    sideTab.Visible = not sideTab.Visible
end)

-- Toggle Ultra Instinct when the switch is clicked
toggleBackground.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        ultraInstinctActive = not ultraInstinctActive
        updateToggleSwitch()
    end
end)

-- Teleport Behind Attacker
local function teleportBehindAttacker(attacker)
    if not ultraInstinctActive or not attacker then return end

    local attackerCharacter = attacker.Character
    local localCharacter = LocalPlayer.Character
    if attackerCharacter and localCharacter then
        local attackerRoot = attackerCharacter:FindFirstChild("HumanoidRootPart")
        local localRoot = localCharacter:FindFirstChild("HumanoidRootPart")
        if attackerRoot and localRoot then
            local positionBehind = attackerRoot.Position - attackerRoot.CFrame.LookVector * 5
            localRoot.CFrame = CFrame.new(positionBehind)
        end
    end
end

-- Monitor Hits to Detect When Player is Hit
local function monitorHits()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local currentHealth = humanoid.Health

    humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if humanoid.Health < currentHealth then
            -- Assume the attacker is the last player to deal damage
            local lastAttacker = Players:GetPlayerFromCharacter(humanoid.LastHit) -- Replace with game-specific damage tracking logic
            teleportBehindAttacker(lastAttacker)
        end
        currentHealth = humanoid.Health
    end)
end

-- Update the toggle UI to reflect the initial state
updateToggleSwitch()

-- Start monitoring hits when the character loads
LocalPlayer.CharacterAdded:Connect(monitorHits)
if LocalPlayer.Character then
    monitorHits()
end
